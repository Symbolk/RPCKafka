/*
 * Automatically generated by jrpcgen 1.0.7 on 6/7/16 3:40 AM
 * jrpcgen is part of the "Remote Tea" ONC/RPC package for Java
 * See http://remotetea.sourceforge.net for details
 */
import org.acplt.oncrpc.*;
import java.io.IOException;

import java.net.InetAddress;

import org.acplt.oncrpc.server.*;

/**
 */
public abstract class consumerServerStub extends OncRpcServerStub implements OncRpcDispatchable {

    public consumerServerStub()
           throws OncRpcException, IOException {
        this(0);
    }

    public consumerServerStub(int port)
           throws OncRpcException, IOException {
        this(null, port);
    }

    public consumerServerStub(InetAddress bindAddr, int port)
           throws OncRpcException, IOException {
        info = new OncRpcServerTransportRegistrationInfo [] {
            new OncRpcServerTransportRegistrationInfo(consumer.CONSUMER, 1),
        };
        transports = new OncRpcServerTransport [] {
            new OncRpcUdpServerTransport(this, bindAddr, port, info, 32768),
            new OncRpcTcpServerTransport(this, bindAddr, port, info, 32768)
        };
    }

    public void dispatchOncRpcCall(OncRpcCallInformation call, int program, int version, int procedure)
           throws OncRpcException, IOException {
        if ( version == 1 ) {
            switch ( procedure ) {
            case 1: {
                call.retrieveCall(XdrVoid.XDR_VOID);
                call_result result$ = connect_1();
                call.reply(result$);
                break;
            }
            case 2: {
                topics args$ = new topics();
                call.retrieveCall(args$);
                subscribe_1(args$);
                call.reply(XdrVoid.XDR_VOID);
                break;
            }
            case 3: {
                call.retrieveCall(XdrVoid.XDR_VOID);
                unsubscribe_1();
                call.reply(XdrVoid.XDR_VOID);
                break;
            }
            case 4: {
                call.retrieveCall(XdrVoid.XDR_VOID);
                topics result$ = subscription_1();
                call.reply(result$);
                break;
            }
            case 5: {
                XdrString args$ = new XdrString();
                call.retrieveCall(args$);
                partitionInfoList result$ = partitionsFor_1(args$.stringValue());
                call.reply(result$);
                break;
            }
            case 6: {
                XdrLong args$ = new XdrLong();
                call.retrieveCall(args$);
                consumerRecordList result$ = poll_1(args$.longValue());
                call.reply(result$);
                break;
            }
            case 7: {
                class XdrAble$ implements XdrAble {
                    public String arg1;
                    public int arg2;
                    public void xdrEncode(XdrEncodingStream xdr)
                        throws OncRpcException, IOException {
                    }
                    public void xdrDecode(XdrDecodingStream xdr)
                        throws OncRpcException, IOException {
                        arg1 = xdr.xdrDecodeString();
                        arg2 = xdr.xdrDecodeInt();
                    }
                };
                XdrAble$ args$ = new XdrAble$();
                call.retrieveCall(args$);
                XdrLong result$ = new XdrLong(position_1(args$.arg1, args$.arg2));
                call.reply(result$);
                break;
            }
            case 8: {
                class XdrAble$ implements XdrAble {
                    public String arg1;
                    public int arg2;
                    public long arg3;
                    public void xdrEncode(XdrEncodingStream xdr)
                        throws OncRpcException, IOException {
                    }
                    public void xdrDecode(XdrDecodingStream xdr)
                        throws OncRpcException, IOException {
                        arg1 = xdr.xdrDecodeString();
                        arg2 = xdr.xdrDecodeInt();
                        arg3 = xdr.xdrDecodeLong();
                    }
                };
                XdrAble$ args$ = new XdrAble$();
                call.retrieveCall(args$);
                seek_1(args$.arg1, args$.arg2, args$.arg3);
                call.reply(XdrVoid.XDR_VOID);
                break;
            }
            case 9: {
                class XdrAble$ implements XdrAble {
                    public String arg1;
                    public int arg2;
                    public void xdrEncode(XdrEncodingStream xdr)
                        throws OncRpcException, IOException {
                    }
                    public void xdrDecode(XdrDecodingStream xdr)
                        throws OncRpcException, IOException {
                        arg1 = xdr.xdrDecodeString();
                        arg2 = xdr.xdrDecodeInt();
                    }
                };
                XdrAble$ args$ = new XdrAble$();
                call.retrieveCall(args$);
                seekToBeginning_1(args$.arg1, args$.arg2);
                call.reply(XdrVoid.XDR_VOID);
                break;
            }
            case 10: {
                class XdrAble$ implements XdrAble {
                    public String arg1;
                    public int arg2;
                    public void xdrEncode(XdrEncodingStream xdr)
                        throws OncRpcException, IOException {
                    }
                    public void xdrDecode(XdrDecodingStream xdr)
                        throws OncRpcException, IOException {
                        arg1 = xdr.xdrDecodeString();
                        arg2 = xdr.xdrDecodeInt();
                    }
                };
                XdrAble$ args$ = new XdrAble$();
                call.retrieveCall(args$);
                seekToEnd_1(args$.arg1, args$.arg2);
                call.reply(XdrVoid.XDR_VOID);
                break;
            }
            case 11: {
                call.retrieveCall(XdrVoid.XDR_VOID);
                close_1();
                call.reply(XdrVoid.XDR_VOID);
                break;
            }
            default:
                call.failProcedureUnavailable();
            }
        } else {
            call.failProgramUnavailable();
        }
    }

    public abstract call_result connect_1();

    public abstract void subscribe_1(topics arg1);

    public abstract void unsubscribe_1();

    public abstract topics subscription_1();

    public abstract partitionInfoList partitionsFor_1(String arg1);

    public abstract consumerRecordList poll_1(long arg1);

    public abstract long position_1(String arg1, int arg2);

    public abstract void seek_1(String arg1, int arg2, long arg3);

    public abstract void seekToBeginning_1(String arg1, int arg2);

    public abstract void seekToEnd_1(String arg1, int arg2);

    public abstract void close_1();

}
// End of consumerServerStub.java
